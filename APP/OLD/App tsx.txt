import React, { useState, useEffect } from 'react';
import { supabase } from './lib/supabase';
import toast, { Toaster } from 'react-hot-toast';
import { Player } from './types/dnd';
import { InstallPrompt } from './components/InstallPrompt';
import { authService } from './services/authService';

function App() {
  const [loading, setLoading] = useState(true);
  const [session, setSession] = useState(null);
  const [selectedCharacter, setSelectedCharacter] = useState<Player | null>(null);

  // État pour suivre si l'utilisateur revient à la sélection des personnages
  const [returningToSelection, setReturningToSelection] = useState(false);

  // Import dynamique des pages
  const [LoginPage, setLoginPage] = useState<React.ComponentType<any> | null>(null);
  const [CharacterSelectionPage, setCharacterSelectionPage] = useState<React.ComponentType<any> | null>(null);
  const [GamePage, setGamePage] = useState<React.ComponentType<any> | null>(null);

  // Chargement des composants
  useEffect(() => {
    const loadComponents = async () => {
      try {
        const loginModule = await import('./pages/LoginPage');
        const characterSelectionModule = await import('./pages/CharacterSelectionPage');
        const gamePageModule = await import('./pages/GamePage');
        
        setLoginPage(() => loginModule.LoginPage);
        setCharacterSelectionPage(() => characterSelectionModule.CharacterSelectionPage);
        setGamePage(() => gamePageModule.GamePage);
      } catch (error) {
        console.error('Erreur lors du chargement des composants:', error);
      }
    };
    
    loadComponents();
  }, []);

  useEffect(() => {
    // Récupère la session initiale
    authService.getSession().then((session) => {
      setSession(session);
      setLoading(false);
    });

    // Écoute les changements d'authentification
    const subscription = authService.onAuthStateChange((session) => {
      // Ne pas afficher de toast ici car on reste sur la page de sélection
      setSession(session);

      // Si la session devient null, réinitialiser l'état
      if (!session) {
        setSelectedCharacter(null);
        setReturningToSelection(false);
      }
    });

    return () => {
      if (subscription && subscription.unsubscribe) {
        subscription.unsubscribe();
      }
    };
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500 mx-auto" />
          <p className="text-gray-400">Chargement en cours...</p>
        </div>
      </div>
    );
  }
  
  // Afficher un loader si les composants ne sont pas encore chargés
  if (!LoginPage || !CharacterSelectionPage || !GamePage) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500 mx-auto" />
          <p className="text-gray-400">Chargement des composants...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <Toaster position="top-right" />
      <InstallPrompt />
      {!session ? (
        <LoginPage />
      ) : !selectedCharacter ? (
        <CharacterSelectionPage 
          session={session} 
          onCharacterSelect={setSelectedCharacter}
        />
      ) : (
        <GamePage
          session={session} 
          selectedCharacter={selectedCharacter}
          onBackToSelection={() => {
            setSelectedCharacter(null);
            setReturningToSelection(true);
          }}
        />
      )}
    </>
  );
}

export default App;