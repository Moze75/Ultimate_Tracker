import React, { useState, useEffect } from 'react';
import { testConnection } from '../lib/supabase';
import toast from 'react-hot-toast';
import { Player } from '../types/dnd';
import { LogOut, MessageSquare } from 'lucide-react';
import { PlayerProfile } from '../components/PlayerProfile';
import { TabNavigation } from '../components/TabNavigation';
import CombatTab from '../components/CombatTab';
import { EquipmentTab } from '../components/EquipmentTab';
import { AbilitiesTab } from '../components/AbilitiesTab';
import { StatsTab } from '../components/StatsTab';
import { WebResourcesTab } from '../components/WebResourcesTab';
import { PlayerContext } from '../contexts/PlayerContext';

// Import des services
import { playerService } from '../services/playerService';
import { inventoryService } from '../services/inventoryService';
import { authService } from '../services/authService';

type Currency = 'gold' | 'silver' | 'copper';
type Money = Record<Currency, number>;

interface GamePageProps {
  session: any;
  selectedCharacter: Player;
  onBackToSelection: () => void;
}

export function GamePage({ session, selectedCharacter, onBackToSelection }: GamePageProps) {
  const [loading, setLoading] = useState(true);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const [currentPlayer, setCurrentPlayer] = useState<Player | null>(selectedCharacter);
  const [inventory, setInventory] = useState([]);
  const [activeTab, setActiveTab] = useState('combat');

  useEffect(() => {
    const initialize = async () => {
      try {
        setLoading(true);
        setConnectionError(null);

        const isConnected = await testConnection();
        if (!isConnected.success) {
          throw new Error('Impossible de se connecter à la base de données');
        }

        // Utilise le personnage sélectionné
        setCurrentPlayer(selectedCharacter);
        const inventoryData = await inventoryService.getPlayerInventory(selectedCharacter.id);
        setInventory(inventoryData);

        setLoading(false);
      } catch (error: any) {
        console.error('Erreur d\'initialisation:', error);
        setConnectionError(error.message);
        setLoading(false);
      }
    };

    initialize();
  }, [session, selectedCharacter]);

  const handleSignOut = async () => {
    try {
      // Retourner à la sélection des personnages sans se déconnecter
      if (onBackToSelection) {
        onBackToSelection();
        toast.success('Retour à la sélection des personnages');
      } else {
        // Fallback au cas où onBackToSelection n'est pas défini
        await authService.signOut();
        toast.success('Déconnexion réussie');
      }
    } catch (error: any) {
      console.error('Erreur lors du retour à la sélection:', error);
      toast.error('Erreur lors du retour à la sélection');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500 mx-auto"></div>
          <p className="text-gray-400">Chargement en cours...</p>
        </div>
      </div>
    );
  }

  if (connectionError) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="max-w-md w-full space-y-4 stat-card p-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-red-500 mb-4">Erreur de connexion</h2>
            <p className="text-gray-300 mb-4">{connectionError}</p>
            <p className="text-sm text-gray-400 mb-4">
              Vérifiez votre connexion Internet et réessayez.
            </p>
          </div>
          <button
            onClick={() => {
              setConnectionError(null);
              toast.loading('Tentative de reconnexion...');
            }}
            className="w-full btn-primary px-4 py-2 rounded-lg"
          >
            Réessayer
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-2 sm:p-4 md:p-6 flex flex-col">
      <div className="max-w-5xl w-full space-y-4 sm:space-y-6 flex-1" style={{ marginLeft: '0rem', marginRight: '0rem' }}>
        {currentPlayer && (
          <>
            <PlayerContext.Provider value={currentPlayer}>
            <PlayerProfile 
              player={currentPlayer} 
              onUpdate={(updatedPlayer) => setCurrentPlayer(updatedPlayer)} 
            />

            <TabNavigation
              activeTab={activeTab}
              onTabChange={setActiveTab}
            />

            {activeTab === 'combat' && (
              <CombatTab
                player={currentPlayer} 
                onUpdate={(updatedPlayer) => setCurrentPlayer(updatedPlayer)} 
              />
            )}

            {activeTab === 'abilities' && (
              <AbilitiesTab
                player={currentPlayer}
                onUpdate={(updatedPlayer) => setCurrentPlayer(updatedPlayer)}
              />
            )}

            {activeTab === 'stats' && (
              <StatsTab
                player={currentPlayer}
                onUpdate={(updatedPlayer) => setCurrentPlayer(updatedPlayer)}
              />
            )}

            {activeTab === 'equipment' && (
              <EquipmentTab
                player={currentPlayer} 
                inventory={inventory} 
                onPlayerUpdate={(updatedPlayer) => setCurrentPlayer(updatedPlayer)} 
                onInventoryUpdate={setInventory} 
              />
            )}

            {activeTab === 'web' && (
              <WebResourcesTab />
            )}
            </PlayerContext.Provider>
          </>
        )}
      </div>
      
      <div className="max-w-4xl w-full mt-6" style={{ marginLeft: 'auto', marginRight: 'auto', transform: 'translateX(-0.5rem)' }}>
        <button
          onClick={handleSignOut}
          className="w-full btn-secondary px-4 py-2 rounded-lg flex items-center justify-center gap-2"
        >
          <LogOut size={20} />
          Retour aux personnages
        </button>
      </div>
    </div>
  );
}